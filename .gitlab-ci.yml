stages:
  - Artifacts
  - Cross-Project
  - End-to-End
  - Dashboard-Update

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - mkdir -p ./data ; touch ./data/empty.env
  - for envfile in data/*env ; do source $envfile ; echo ----- $envfile ---- ; cat $envfile ; done
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd


.build_source: &build_source
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # SOURCE
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - >
      if [ -z "$SOURCE" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      elif [ "$DISABLE_SOURCE" == "yes" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      elif [ "$ARCH" == "arm64" ] && [ "$TARGET_PROJECT_NAME" == "envoy" ]; then
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${SOURCE}/jobs?scope=success" | jq '.[] | select(.name=="container-arm") | .id') 
        curl -s -o data/"$TARGET_PROJECT_NAME".env -L "${BASE_URL}/${ORG}/${TARGET_PROJECT_NAME}/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
        cat data/"$TARGET_PROJECT_NAME".env
      elif [ "$ARCH" == "arm64" ] && [ "$TARGET_PROJECT_NAME" == "fluentd" ]; then
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${SOURCE}/jobs?scope=success" | jq '.[] | select(.name=="container-arm") | .id') 
        curl -s -o data/"$TARGET_PROJECT_NAME".env -L "${BASE_URL}/${ORG}/${TARGET_PROJECT_NAME}/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
        cat data/"$TARGET_PROJECT_NAME".env
      else
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${SOURCE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id') 
        curl -s -o data/"$TARGET_PROJECT_NAME".env -L "${BASE_URL}/${ORG}/${TARGET_PROJECT_NAME}/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
        cat data/"$TARGET_PROJECT_NAME".env
      fi

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

.cross-project: &cross-project
  image: crosscloudci/debian-helm-kubectl:v2.14.3-v1.16.2
  stage: Cross-Project
  script:
    - echo "$KUBECONFIG" | base64 -d | tee ./kubeconfig >/dev/null
    - export KUBECONFIG=./kubeconfig
    - kubectl get nodes
    - kubectl get componentstatuses
    - env | grep IMAGE
    - env | grep TAG
    - helm init --client-only
    - echo Removing any previous deploys of "${DEPLOYMENT_NAME}"
    - helm ls --all "${DEPLOYMENT_NAME}" > /dev/null && helm delete --purge "${DEPLOYMENT_NAME}" || true
    - >
      if [ "$TARGET_PROJECT_NAME" == so ]; then

         helm repo add onap-amsterdam  https://cncf.gitlab.io/onap-amsterdam
         helm repo add onap-master  https://cncf.gitlab.io/onap-master 
         # echo "Remove old deploys"
         # helm delete --purge onap-config || true
         # helm delete --purge onap-log || true
         # helm delete --purge onap-robot || true
         # sleep 10

         echo "Create project namespaces"
         kubectl create namespace onap || true
         kubectl create namespace onap-log || true
         kubectl create namespace onap-mso || true
         kubectl create namespace onap-robot || true
         kubectl create secret docker-registry onap-docker-registry-key --docker-server=nexus3.onap.org:10001 --docker-username="$ONAP_USERNAME" --docker-password="$ONAP_PASSWORD" --docker-email="$ONAP_EMAIL" --namespace=onap || true
         kubectl create secret docker-registry onap-docker-registry-key --docker-server=nexus3.onap.org:10001 --docker-username="$ONAP_USERNAME" --docker-password="$ONAP_PASSWORD" --docker-email="$ONAP_EMAIL" --namespace=onap-log || true
         kubectl create secret docker-registry onap-docker-registry-key --docker-server=nexus3.onap.org:10001 --docker-username="$ONAP_USERNAME" --docker-password="$ONAP_PASSWORD" --docker-email="$ONAP_EMAIL" --namespace=onap-mso || true
         kubectl create secret docker-registry onap-docker-registry-key --docker-server=nexus3.onap.org:10001 --docker-username="$ONAP_USERNAME" --docker-password="$ONAP_PASSWORD" --docker-email="$ONAP_EMAIL" --namespace=onap-robot || true
         
         echo "Add clusterrolebinding"
         kubectl create clusterrolebinding onap-config-admin-binding --clusterrole=cluster-admin --serviceaccount=onap:default || true
         kubectl create clusterrolebinding onap-log-admin-binding --clusterrole=cluster-admin --serviceaccount=onap-log:default || true
         kubectl create clusterrolebinding onap-mso-admin-binding --clusterrole=cluster-admin --serviceaccount=onap-mso:default || true
         kubectl create clusterrolebinding onap-robot-admin-binding --clusterrole=cluster-admin --serviceaccount=onap-robot:default || true
         
         echo "Create Config/Log/Robot"
         helm upgrade --install --force onap-config --namespace=onap onap-amsterdam/config
         helm upgrade --install --force onap-log --namespace=onap-log onap-amsterdam/log
         helm upgrade --install --force onap-robot --namespace=onap-robot onap-amsterdam/robot
         export NAMESPACE="onap-mso"
      else
        echo "skipping onap configuration"
      fi
    - >
      if [ "$TARGET_PROJECT_NAME" == prometheus ]; then
         EXTRA_ARGS="--set alertmanager.persistentVolume.enabled=false --set server.persistentVolume.enabled=false --set pushgateway.persistentVolume.enabled=false" 
         if [ "$TARGET_PROJECT_COMMIT_REF_NAME" == master ]; then
            EXTRA_ARGS="$EXTRA_ARGS --set nodeExporter.service.hostPort=9101" 
         fi
      elif [ "$TARGET_PROJECT_NAME" == envoy ]; then
         EXTRA_ARGS="--set service.name=envoy-$TARGET_PROJECT_COMMIT_REF_NAME" 
      fi
    - helm install
         --namespace "${NAMESPACE}"
         --name "${DEPLOYMENT_NAME}"
         $EXTRA_ARGS
         $IMAGE_ARGS
         $TAG_ARGS
         "${CHART_REPO}"/"${CHART}"
         --wait
         --timeout 3600
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

e2e:
  image: crosscloudci/debian-helm-kubectl:v2.13.1-v1.13.0
  stage: End-to-End
  script:
    - echo "$KUBECONFIG" | base64 -d | tee ./kubeconfig >/dev/null
    - export KUBECONFIG=$(pwd)/kubeconfig
    - >
      if [ "$TARGET_PROJECT_NAME" == so ]; then
         ls -al
         ./cd.sh
      else
        echo "Enable in .gitlab-ci.yml"
      fi


Dashboard:
  image: crosscloudci/debian-go
  stage: Dashboard-Update
  script:
    - echo 'test'


# Build-Source VARs
Build-Source:
  <<: *build_source

# Project Deploy VARs
App-Deploy:
  <<: *cross-project



