stages:
  # - charts
  - Artifacts
  - Cross-Project
  - End-to-End
  # - Dashboard-Update

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - mkdir -p ./data ; touch ./data/empty.env
  - for envfile in data/*env ; do source $envfile ; echo ----- $envfile ---- ; cat $envfile ; done
  - >
    if [ "$BASE_URL" == "https://gitlab.dev.cncf.ci" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/master/cross-cloud.yml"
    else
      echo "Environment doesn't match"
      exit 0
    fi
  - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd

# lint:
#   stage: charts
#   script:
#     - helm lint charts/*

# publish-charts:
#   stage: charts
#   script:
#     - helm repo add charts.gitlab.io https://charts.gitlab.io/ #Add Upstream Gitlab.io for kubernetes-gitlab-demo
#     - helm lint stable/* || true
#     - for chart in stable/*; do helm dep up $chart; done
#     - mkdir -p public/stable/
#     - (cd public/stable; helm package ../../stable/*)
#     - helm repo index public/stable --url https://cncf.gitlab.io/stable
#     - helm lint demo/*
#     - for chart in demo/*; do helm dep up $chart; done
#     - mkdir -p public/demo/
#     - (cd public/demo; helm package ../../demo/*)
#     - helm repo index public/demo --url https://cncf.gitlab.io/demo
#     - find public
#   artifacts:
#     paths:
#     - public

.build_source: &build_source
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # SOURCE
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - >
      if [ -z "${SOURCE}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      elif [ "${DISABLE_SOURCE}" == "yes" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${SOURCE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id') 
        curl -s -o data/"$PROJECT".env -L "${BASE_URL}/${ORG}/${PROJECT}/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
        cat data/"$PROJECT".env
      fi

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

.build_branch: &build_branch
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # BRANCH: MUST BE SET
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_TOKEN: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - >
      if [ -z "${BRANCH}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo "Checking for Latest Build"
        curl -s -L -o data/${PROJECT}.url "${BASE_URL}/${ORG}/${PROJECT}/builds/artifacts/${BRANCH}/file/release.env?job=container"
        if cat data/"$PROJECT".url | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw ; then
        RELEASE_ENV=$(cat data/${PROJECT}.url | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
        curl -o data/${PROJECT}.env -L ${BASE_URL}/$RELEASE_ENV
        cat data/${PROJECT}.env
        else
          # PROJECT_PIPELINE=$(curl -X POST -F token=$CI_JOB_TOKEN -F ref=$BRANCH https://gitlab.cncf.ci/api/v4/projects/$PROJECT_ID/trigger/pipeline | jq '.id')
          PROJECT_PIPELINE=$(curl -X POST -F token=$PROJECT_TOKEN -F ref=$BRANCH -F "variables[BUILD_TRIGGER]=yes" "$BASE_URL"/api/v4/projects/$PROJECT_ID/trigger/pipeline | jq '.id')

          echo 'Wait for Build "FIX ME / HACK"'
          until [ "$JOB_STATUS" == '"success"' ]; do
              JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .status')"
              sleep 0.5
              if [ "$JOB_STATUS" == '"failed"' ]; then
                  exit 1
              elif [ "$JOB_STATUS" == '"canceled"' ]; then
                  exit 1
              else
                  continue
              fi
          done
          echo 'Build Compleate'
          
          PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id') 
          curl -s -o data/"$PROJECT".env -L "${BASE_URL}/${ORG}/${PROJECT}/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
          cat data/"$PROJECT".env
        fi
      fi
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

.build_commit: &build_commit
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # COMMIT: MUST BE SET
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - echo "$COMMIT"
    - >
      if [ -z "${COMMIT}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo "Checking for Container Artifact on Commit"

        echo "Fetch Full SHA" 
        SHA=$(curl --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/9/repository/commits/${COMMIT}" | jq --raw-output '.id')
        echo ${SHA}

        echo "Fetch Most Recent Job ID's on Commit"
        COMPILE_JOB=$(curl --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/repository/commits/${SHA}/statuses" | jq '.[] | select(.name=="compile")' | jq -s 'sort_by(.created_at)' | jq '.[0] | .id')
        echo ${COMPILE_JOB}
        
        CONTAINER_JOB=$(curl --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/repository/commits/${SHA}/statuses" | jq '.[] | select(.name=="container")' | jq -s 'sort_by(.created_at)' | jq '.[0] | .id')

        echo "Fetch Artifact"
        curl -s -o data/${PROJECT}.env -L "${BASE_URL}/${ORG}/${PROJECT}/-/jobs/${CONTAINER_JOB}/artifacts/raw/release.env"

        echo "Verify Artifact"
        if source ./data/${PROJECT}.env && env | grep ${PROJECT}; then
        cat data/${PROJECT}.env
        else
          echo "Trigger Jobs for missing Artifacts"
          
          PROJECT_COMPILE_JOB=$(curl -X POST --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/jobs/${COMPILE_JOB}/retry" | jq '.id')
          echo $PROJECT_COMPILE_JOB
          echo 'Wait for Build "FIX ME / HACK"'
          until [ "$COMPILE_JOB_STATUS" == '"success"' ]; do
              COMPILE_JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/jobs/${PROJECT_COMPILE_JOB}" | jq -s '.[] | .status')"
              sleep 0.5
              if [ "$PROJECT_COMPILE_JOB" == '"failed"' ]; then
                  exit 1
              elif [ "$PROJECT_COMPILE_JOB" == '"canceled"' ]; then
                  exit 1
              else
                  continue
              fi
          done
          echo 'Build Compleate'
          
          PROJECT_CONTAINER_JOB=$(curl -X POST --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/jobs/${CONTAINER_JOB}/retry" | jq '.id')
          
          until [ "$CONTAINER_JOB_STATUS" == '"success"' ]; do
              CONTAINER_JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/jobs/${PROJECT_CONTAINER_JOB}" | jq -s '.[] | .status')"
              sleep 0.5
              if [ "$CONTAINER_JOB_STATUS" == '"failed"' ]; then
                  exit 1
              elif [ "$CONTAINER_JOB_STATUS" == '"canceled"' ]; then
                  exit 1
              else
                  continue
              fi
          done
          echo 'Container Build Compleate'
          
          curl -s -o data/${PROJECT}.env -L "${BASE_URL}/${ORG}/${PROJECT}/-/jobs/${PROJECT_CONTAINER_JOB}/artifacts/raw/release.env"
          cat data/${PROJECT}.env
        fi
      fi

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

.cross-project: &cross-project
  image: registry.dev.cncf.ci/cncf/cross-cloud/provisioning:stable-v0-2-0-integrations
  stage: Cross-Project
  # variables:
    # KUBECONFIG: MUST BE SET
    # CLOUD: MUST BE SET
  script:
    - echo "$KUBECONFIG" | base64 -d | tee ./kubeconfig
    - export KUBECONFIG=./kubeconfig
    - kubectl get nodes
    - kubectl get componentstatuses
    - env | grep IMAGE
    - env | grep TAG
    - helm init
    - echo Removing any previous deploys of "${NAME}"
    - helm ls --all "${NAME}" > /dev/null && helm delete --purge "${NAME}" || true
    - kubectl get svc "${LABEL_ARGS}"
    - kubectl get pods "${LABEL_ARGS}"
    - helm repo add cncf http://cncf.gitlab.io/stable
    - helm install -f defaults/"${PROJECT}".yaml
         --name "${NAME}"
         --set "${IMAGE_ARGS}"="${IMAGE}"
         --set "${TAG_ARGS}"="${TAG}"
         "${CHART_REPO}"/"${CHART}"
    - DEPLOYED_IMAGE=$(kubectl get pods "${LABEL_ARGS}" -o jsonpath={"${FILTER}"})
    - echo Deployed Image - $DEPLOYED_IMAGE
    - kubectl get svc "${LABEL_ARGS}"
    - kubectl get pods "${LABEL_ARGS}"
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

e2e:
  image: registry.cncf.ci/cncf/cross-cloud:go
  stage: End-to-End
  script:
    - echo 'test'

# Dashboard:
#   image: registry.cncf.ci/cncf/cross-cloud:go
#   stage: Dashboard-Update
#   script:
#     - echo 'test'


# Build-Source VARs
Build-Source:
  <<: *build_source

# Build-Branch VARs
Build-Branch:
  <<: *build_branch

# Build-Branch VARs
Build-Commit:
  <<: *build_commit

# Project Deploy VARs
App-Deploy:
  <<: *cross-project



