stages:
  # - charts
  - Artifacts
  - Cross-Project
  - End-to-End
  - Dashboard-Update

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - mkdir -p ./data ; touch ./data/empty.env
  - for envfile in data/*env ; do source $envfile ; echo ----- $envfile ---- ; cat $envfile ; done
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd

# lint:
#   stage: charts
#   script:
#     - helm lint charts/*

# publish-charts:
#   stage: charts
#   script:
#     - helm repo add charts.gitlab.io https://charts.gitlab.io/ #Add Upstream Gitlab.io for kubernetes-gitlab-demo
#     - helm lint stable/* || true
#     - for chart in stable/*; do helm dep up $chart; done
#     - mkdir -p public/stable/
#     - (cd public/stable; helm package ../../stable/*)
#     - helm repo index public/stable --url https://cncf.gitlab.io/stable
#     - helm lint demo/*
#     - for chart in demo/*; do helm dep up $chart; done
#     - mkdir -p public/demo/
#     - (cd public/demo; helm package ../../demo/*)
#     - helm repo index public/demo --url https://cncf.gitlab.io/demo
#     - find public
#   artifacts:
#     paths:
#     - public

.build_source: &build_source
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # SOURCE
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - >
      if [ -z "${SOURCE}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      elif [ "${DISABLE_SOURCE}" == "yes" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${SOURCE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id') 
        curl -s -o data/"$TARGET_PROJECT_NAME".env -L "${BASE_URL}/${ORG}/${TARGET_PROJECT_NAME}/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
        cat data/"$TARGET_PROJECT_NAME".env
      fi

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

.cross-project: &cross-project
  image: registry.dev.cncf.ci/cncf/cross-cloud/provisioning:stable-v0-2-0-integrations
  stage: Cross-Project
  # variables:
    # KUBECONFIG: MUST BE SET
    # CLOUD: MUST BE SET
  script:
    - echo "$KUBECONFIG" | base64 -d | tee ./kubeconfig
    - export KUBECONFIG=./kubeconfig
    - kubectl get nodes
    - kubectl get componentstatuses
    - env | grep IMAGE
    - env | grep TAG
    - helm init
    - echo Removing any previous deploys of "${DEPLOYMENT_NAME}"
    - helm ls --all "${DEPLOYMENT_NAME}" > /dev/null && helm delete --purge "${DEPLOYMENT_NAME}" || true
    - kubectl get svc -l "${LABEL_ARGS}"
    - kubectl get pods -l "${LABEL_ARGS}"
    - helm repo add cncf http://cncf.gitlab.io/stable
    - helm install -f defaults/"${TARGET_PROJECT_NAME}".yaml
         --name "${DEPLOYMENT_NAME}"
         --set "${IMAGE_ARGS}"="${IMAGE}"
         "${CHART_REPO}"/"${CHART}"
    - DEPLOYED_IMAGE=$(kubectl get pods -l "${LABEL_ARGS}" -o jsonpath={"${FILTER}"})
    - echo Deployed Image - $DEPLOYED_IMAGE
    - kubectl get svc -l "${LABEL_ARGS}"
    - kubectl get pods -l "${LABEL_ARGS}"
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

e2e:
  image: crosscloudci/debian-go
  stage: End-to-End
  script:
    - echo 'test'

Dashboard:
  image: crosscloudci/debian-go
  stage: Dashboard-Update
  script:
    - echo 'test'


# Build-Source VARs
Build-Source:
  <<: *build_source

# Project Deploy VARs
App-Deploy:
  <<: *cross-project



